@import: ../packages/satysfi-api

open Type in

document (|
  title = {インライン};
  style-sheet = `main.css`;
|) '<
  +top {primitive} <
    +section{変換系}<
      +p{他の型から変換したり他の型へ変換する系のプリミティブです。}
      +val (`embed-string`) (tS --> tIT) <
        +p{文字列をインラインに変換します。}
      >
      +val (`embed-math`) (tCTX --> tMATH --> tIB)<
        +p{\type(tMATH);型を\type(tIB);型にして文章中に置くための唯一のプリミティブです。}
      >
      +val (`extract-string`) (tIB --> tS) <
        +p{\type(tIB);を無理やり文字列に変換します。}
      >
      +val (`read-inline`) (tCTX --> tIT --> tIB)  <
        +p{\code(`read-inline ctx {text}`);のようにして使います。
        文字やコマンド以外の情報がない\type(tIT);を\type(tIB);型に変換します。
        この時に与える\type(tCTX);型によって出力される\type(tIB);のフォントや色やフォントサイズを変更することができます。}
      >
      +val(`line-break`) (tB --> tB --> tCTX --> tIT --> tIB) <
        +p{\type(tIB);型を\type(tBB);型に変換します。}
        +p{最初に与える2つの真偽値は、それぞれ「そのブロックの直前での改行を許可するか」と「直後での改行を許可するか」です。}
      >
      +val (`embed-block-breakable`) (tCTX --> tBB --> tIB) <
        +p{\type(tBB);型を一時的に\type(tIB);型に擬態させる役割を持ちます。}
      >
      +val (`add-footnote`) (tBB --> tIB) <
        +p{脚注を作成します。}
      >
      +val (`embed-block-top`) (tCTX --> tLN --> tFUN(tCTX --> tBB) --> tIB) <
        +p{\type(tBB);型を指定した横幅の\type(tIB);型に変換します。この時、一番上の行が他の行と同じ高さになるように変換されます。}
      >
      +val (`embed-block-bottom`) (tCTX --> tLN --> tFUN(tCTX --> tBB) --> tIB) <
        +p{\type(tBB);型を指定した横幅の\type(tIB);型に変換します。この時、一番下の行が他の行と同じ高さになるように変換されます。}
      >
      +val (`inline-graphics`) (tLN --> tLN --> tLN --> tFUN(tPT --> tL(tGR)) --> tIB)<
        +p{横幅・高さ・深さと、座標を元にグラフィックを返す関数を与えることで\type(tGR);を\type(tIB);に変換できます。}
      >
      +val (`inline-graphics-outer`) (tLN --> tLN --> tLN --> tFUN(tLN --> tPT --> tL(tGR)) --> tIB)<
        +p{詳細不明}
      >
      +val (`use-image-by-width`) (tIMG --> tLN --> tIB) <
        +p{PDFや画像のパスから作成した\type(tIMG);型と横幅を与えることで\type(tIB);を作成します。}
      >
    >

    +section {長さ・余白系}<
      +val (`inline-nil`) (tIB) <
        +p{“何も起こさない”\type(tIB);です。}
      >
      +val (`inline-fil`) (tIB) <
        +p{周囲の要請に合わせてどこまでも伸びるが行分割されることのない空白です。}
      >
      +val (`inline-skip`) (tLN --> tIB) <
        +p{指定した長さの分だけ改行されない空白を作ります。}
      >
      +val (`inline-glue`) (tLN --> tLN --> tLN --> tIB) <
        +p{自然な長さ・周囲の要請に合わせて縮む時の長さ・伸びるときの長さを与えて空白を作ります。}
      >
      +val(`script-guard`) (tSCR --> tIB --> tIB) <
        +p{文字体系を与えることで、前後のスペーシングをその文字体系に揃えられます。}
      >
      +val(`script-guard-both`) (tSCR --> tSCR --> tIB --> tIB) <
        +p{前後に違う文字体系が来るときに、そのスペーシングを調節できる。}
      >
      +val (`get-leftmost-script`) (tIB --> tOPT(tSCR)) <
        +p{その\type(tIB);がどの文字体系なのかを取得する}
      >
      +val (`get-leftmost-script`)(tIB --> tOPT(tSCR)) <
        +p{その\type(tIB);の左側がどの文字体系なのかを取得する}
      >
      +val (`get-leftmost-script`)(tIB --> tOPT(tSCR)) <
        +p{その\type(tIB);の右側がどの文字体系なのかを取得する}
      >
      +val (`discretionary`) (tI --> tIB --> tIB --> tIB --> tIB) <
        +p{改行ペナルティ・「そこで行分割されなかったときの内容」・「そこで行分割されたときに直前の行末に入る内容」・「その直後の行頭に入る内容」を与えることで行分割候補位置を作成します。}
      >
      +val (`get-natural-metrics`) (tIB --> tPROD[tLN;tLN;tLN]) <
        +p{その\type(tIB);の横幅・高さ・深さをタプルで返します。}
      >
    >

    +section{囲みわく}<
      +val (`inline-frame-outer`) (tPADS --> tDECO --> tIB --> tIB) <
        +p{余白指定、描画指定、内容をそれぞれ入れることで枠で囲まれた部分を作ります。}
        +p{枠内で行分割されることはありませんが、内側の要請に合わせて内容に含まれるグルーが伸び縮みします。}
      >

      +val (`inline-frame-inner`) (tPADS --> tDECO --> tIB --> tIB) <
        +p{余白指定、描画指定、内容をそれぞれ入れることで枠で囲まれた部分を作ります。}
        +p{枠内で行分割されることはありません。また、内容に含まれるグルーが伸び縮みすることはありません。}
      >

      +val (`inline-frame-fixed`) (tLN --> tPADS --> tDECO --> tIB --> tIB) <
        +p{枠の幅、余白指定、描画指定、内容をそれぞれ入れることで枠で囲まれた部分を作ります。}
        +p{枠内で行分割されることはありませんが、最初に入れた枠の幅に合わせて内容に含まれるグルーが伸び縮みします。}
      >
      +val (`inline-frame-breakable`) (tPADS --> tDECOSET --> tIB --> tIB) <
        +p{余白、描画指定、内容をそれぞれ入れることで
          途中で行分割可能な枠で囲まれた部分を作ります。内容のグルーは行分割に合わせて伸び縮みします。}
        +p{\code(`inline-frame-breakable`);に与えられるdeco-setはそれぞれ「口」形・「匚」形・「二」形・「コ」形のグラフィックスを返すような関数です。}
      >
    >

    +section{その他}<
      +val (`(++)`) (tIB --> tIB --> tIB) <
        +p{\type(tIB);同士を横に繋げます。}
      >
      +val (`hook-page-break`) (tFUN(tREC[(`page-number`, tI)] --> tPT --> tU) --> tIB)<
        +p{ページ番号を元に何かを行う関数を行えることで副作用を起こします。返される\type(tIB);は\code(`inline-nil`);と同じ挙動をします。}
      >
      +val (`line-stack-top`) (tL(tIB) --> tIB) <
        +p{詳細不明}
      >
      +val (`line-stack-bottom`) (tL(tIB) --> tIB) <
        +p{詳細不明}
      >
      +val (`raise-inline`) (tLN --> tIB --> tIB) <
        +p{詳細不明}
      >
    >
  >
>
