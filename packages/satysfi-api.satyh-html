@require: list
@require: option
@require: html-base

@import: type
@require: make-html/itemize
@require: make-html/code
@require: make-html/url


type cmd =  
  | InlineCmd
  | BlockCmd

module SATySFiAPI : sig

  val document : 'a -> block-text -> string
    constraint 'a :: (|
      title : inline-text;
      style-sheet : string;
    |)


  direct \ref : [string] inline-cmd
  direct +section : [string?; inline-text; block-text] block-cmd
  direct +subsection : [string?; inline-text; block-text] block-cmd
  direct +p : [inline-text] block-cmd
  direct +pn : [inline-text] block-cmd
  direct +top : [inline-text; block-text] block-cmd
  direct +val : [string; Type.t; block-text] block-cmd
  direct +cmdval : [string; Type.t list; cmd; block-text] block-cmd
  direct +direct : [string; Type.t list; cmd; block-text] block-cmd
  direct +type : [string; Type.t; block-text] block-cmd
  direct \type : [Type.t] inline-cmd


end = struct

let concat = List.fold-left (^) ` `


let generate-fresh-label =
  let-mutable count <- 0 in
    (fun () -> (
      let () = count <- !count + 1 in
        `generated:` ^ (arabic (!count))
    ))


let-inline tinfo \ref key =
  let opt = get-cross-reference (key ^ `:num`) in
  let it =
    match opt with
    | None -> {?}
    | Some(s) -> embed-string s
  in
    stringify-inline tinfo it



let document record inner =
  let tinfo = get-initial-text-info () in

  let title = record#title in
  let style-sheet = record#style-sheet in

  let lang = `ja` in

  let s-title = HTMLBase.tag ?* ?:false tinfo `title` (fun tinfo ->stringify-inline tinfo title) in
  let s-style-sheet = `<link rel="stylesheet" type="text/css" href="` ^ style-sheet ^ `">` in


  let head tinfo =
    HTMLBase.tag tinfo `head` (fun tinfo ->
      concat[
        `<meta charset="UTF-8">` ^ (break tinfo);
        s-title ^ (break tinfo);
        s-style-sheet;
      ]
    )
  in


  let body tinfo =
    HTMLBase.tag tinfo `body` (fun tinfo -> stringify-block tinfo inner)
  in

  let main =
    concat [
      `<!DOCTYPE html>` ^ (break tinfo);
      HTMLBase.tag ?:([(`lang`, lang)]) tinfo `html` (fun tinfo ->
        concat[
          (head tinfo);
          (break tinfo);
          (body tinfo);
        ]
      );
    ]
  in
    main


let-mutable num-section <- 0
let-mutable num-subsection <- 0


let section-scheme tinfo label title inner =
  let () = num-section <- !num-section + 1 in
  let () = num-subsection <- 0 in
  let s-num = arabic (!num-section) in
  let () = register-cross-reference (label ^ `:num`) s-num in
  let s-title tinfo =
    HTMLBase.tag ?* ?:false tinfo `h1` (fun tinfo -> stringify-inline tinfo title)
  in
  let s-inner tinfo = stringify-block tinfo inner in
  let main tinfo = s-title tinfo ^ (break tinfo) ^ s-inner tinfo in
    HTMLBase.tag tinfo `section` (fun tinfo -> main tinfo)


let subsection-scheme tinfo label title inner =
  let () = num-subsection <- !num-subsection + 1 in
  let s-num = arabic (!num-section) ^ `.` ^ arabic (!num-subsection) in
  let () = register-cross-reference (label ^ `:num`) s-num in
  let s-title tinfo =
    HTMLBase.tag ?* ?:false tinfo `h2` (fun tinfo -> stringify-inline tinfo title)
  in
  let s-inner tinfo = stringify-block tinfo inner in
  let main tinfo = s-title tinfo ^ (break tinfo) ^ s-inner tinfo in
    HTMLBase.tag tinfo `section` (fun tinfo -> main tinfo)


let-block tinfo +section ?:labelopt title inner =
  let label =
    match labelopt with
    | None -> generate-fresh-label ()
    | Some(s) -> s
  in
    section-scheme tinfo label title inner


let-block tinfo +subsection ?:labelopt title inner =
  let label =
    match labelopt with
    | None -> generate-fresh-label ()
    | Some(s) -> s
  in
    subsection-scheme tinfo label title inner



let-block tinfo +p it =
  HTMLBase.tag tinfo `p` (fun tinfo -> stringify-inline tinfo it) ^ (break tinfo)

let-block tinfo +pn it =
  HTMLBase.tag tinfo `p` (fun tinfo -> stringify-inline tinfo it) ^ (break tinfo)


let my-stringify-inline s tinfo = stringify-inline tinfo s

let my-stringify-block s tinfo = stringify-block tinfo s

let s-nil s tinfo = s 

let keyword tinfo f =
  HTMLBase.tag ?:([(`class`, `keyword`)]) tinfo `span` (fun tinfo -> f tinfo)



let-block tinfo +top it-name bt-inner =
  let s-name tinfo =
    HTMLBase.tag ?:([(`class`, `api-top-name`)]) tinfo `div` (fun tinfo ->
      stringify-inline tinfo it-name
    )
  in
  let s-inner tinfo =
    HTMLBase.tag ?:([(`class`, `api-top-inner`)]) tinfo `div` (fun tinfo ->
      stringify-block tinfo bt-inner
    )
  in
    HTMLBase.tag ?:([(`class`, `api-top`)]) tinfo `div` (fun tinfo ->
      s-name tinfo ^ break tinfo ^ s-inner tinfo
    )


let-block tinfo +val s-name t-type bt-inner =
  let s-val = keyword tinfo (s-nil `val `#) ^ s-name ^ #` : `# ^ Type.to-string t-type in
  let s-inner tinfo = stringify-block tinfo bt-inner in
    HTMLBase.tag ?:([(`class`, `api-val`)]) tinfo `div` (fun tinfo ->
      s-val ^ break tinfo ^ s-inner tinfo
    )

let-block tinfo +cmdval s-name t-type-lst cmd bt-inner =
  let f lst =
    let join i s1 s2 =
      if i <= 0 then
        s2
      else
        s1 ^ `; `# ^ s2
    in
    List.map Type.to-string lst |> List.fold-lefti join ` `
  in
  let s-cmd =
    match cmd with
      | InlineCmd -> `inline-cmd`
      | BlockCmd -> `block-cmd`
  in
  let s-val = keyword tinfo (s-nil `direct `#) ^ s-name ^ #` : `# ^ `[` ^ f t-type-lst ^ `] `# ^ s-cmd in
  let s-inner tinfo = stringify-block tinfo bt-inner in
    HTMLBase.tag ?:([(`class`, `api-val`)]) tinfo `div` (fun tinfo ->
      s-val ^ break tinfo ^ s-inner tinfo
    )

let-block tinfo +direct s-name t-type-lst cmd bt-inner =
  let f lst =
    let join i s1 s2 =
      if i <= 0 then
        s2
      else
        s1 ^ `; `# ^ s2
    in
    List.map Type.to-string lst |> List.fold-lefti join ` `
  in
  let s-cmd =
    match cmd with
      | InlineCmd -> `inline-cmd`
      | BlockCmd -> `block-cmd`
  in
  let s-val = keyword tinfo (s-nil `direct `#) ^ s-name ^ #` : `# ^ `[` ^ f t-type-lst ^ `] `# ^ s-cmd in
  let s-inner tinfo = stringify-block tinfo bt-inner in
    HTMLBase.tag ?:([(`class`, `api-val`)]) tinfo `div` (fun tinfo ->
      s-val ^ break tinfo ^ s-inner tinfo
    )


let-block tinfo +type s-name t-type bt-inner =
  let s-type = keyword tinfo (s-nil `type `# ) ^ s-name ^ #` : `# ^ Type.to-string t-type in
  let s-inner tinfo = stringify-block tinfo bt-inner in
    HTMLBase.tag ?:([(`class`, `api-type`)]) tinfo `div` (fun tinfo ->
      s-type ^ break tinfo ^ s-inner tinfo
    )


let-inline tinfo \type t-type =
  HTMLBase.tag ?:([(`class`, `inline-type`)]) tinfo `span` (fun tinfo ->
    Type.to-string t-type
  )

end

let document = SATySFiAPI.document
